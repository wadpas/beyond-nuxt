generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  username      String?
  firstname     String?
  lastname      String?
  role          UserRole       @default(user)
  avatarUrl     String?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  oAuthAccounts OAuthAccount[]
  orders        Order[]
  books         Book[]
  genres        Genre[]
  authors       Author[]
  covers        Cover[]

  @@map("users")
}

model OAuthAccount {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  providerId     String
  providerUserId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerUserId])
  @@map("oAuthAccounts")
}

model Genre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String
  createdBy String   @db.ObjectId
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    String?  @db.ObjectId
  book      Book?    @relation(fields: [bookId], references: [id])

  @@unique([slug])
  @@map("genres")
}

model Book {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Float    @default(199)
  covers     Cover[]
  genre      Genre[]
  author     Author[] @relation(fields: [authorIds], references: [id])
  authorIds  String[] @db.ObjectId
  isFeatured Boolean  @default(false)
  isActive   Boolean  @default(false)
  createdBy  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]  @relation(fields: [orderIds], references: [id])
  orderIds   String[] @db.ObjectId

  @@map("books")
}

model Author {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  bookIds   String[] @db.ObjectId
  books     Book[]   @relation(fields: [bookIds], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("authors")
}

model Cover {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  coverUrl  String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?  @db.ObjectId

  @@map("covers")
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  booksIds  String[] @db.ObjectId
  books     Book[]   @relation(fields: [booksIds], references: [id])
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}
